{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marks\\\\IdeaProjects\\\\Project-OS\\\\project-os-app\\\\frontend\\\\src\\\\pages\\\\SystemCalls.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Um mapa com os códigos de exemplo que você forneceu\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst codeExamples = {\n  'file-io': `// system-call-file.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string.h>\n\nint main() {\n    int fd;\n    char buffer[100];\n    const char *text = \"Hello, world!\";\n    \n    fd = open(\"test.txt\", O_WRONLY | O_CREAT | O_TRUNC, 0644);\n    write(fd, text, strlen(text));\n    close(fd);\n\n    fd = open(\"test.txt\", O_RDONLY);\n    ssize_t bytes_read = read(fd, buffer, sizeof(buffer)-1);\n    buffer[bytes_read] = '\\\\0';\n    printf(\"Lido do arquivo: %s\\\\n\", buffer);\n    close(fd);\n    \n    return 0;\n}`,\n  'process': `// system-call-process.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nint main() {\n    pid_t pid = fork();\n    if (pid == 0) { // Processo filho\n        printf(\"Eu sou o processo filho!\\\\n\");\n        exit(0);\n    } else { // Processo pai\n        printf(\"Eu sou o processo pai, esperando o filho...\\\\n\");\n        wait(NULL);\n        printf(\"Processo filho terminou.\\\\n\");\n    }\n    return 0;\n}`,\n  'memory': `// system-call-memory.c\n#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    void *initial_brk = sbrk(0);\n    printf(\"Ponteiro de heap inicial: %p\\\\n\", initial_brk);\n    brk(initial_brk + 4096);\n    void *new_brk = sbrk(0);\n    printf(\"Novo ponteiro de heap: %p\\\\n\", new_brk);\n    return 0;\n}`\n};\nfunction SystemCalls() {\n  _s();\n  const [selectedExample, setSelectedExample] = useState('file-io');\n  const [code, setCode] = useState(codeExamples[selectedExample]);\n  const [output, setOutput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleExampleChange = e => {\n    const key = e.target.value;\n    setSelectedExample(key);\n    setCode(codeExamples[key]);\n  };\n\n  // Esta função irá chamar o seu backend\n  const handleExecute = async () => {\n    setIsLoading(true);\n    setOutput('');\n    try {\n      // A URL do seu endpoint no backend (ex: Java/Spring Boot)\n      const response = await fetch('http://localhost:8080/api/execute-c', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: code\n        }) // Envia o código como JSON\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setOutput(`Saída Padrão:\\n${result.stdout}\\n\\nErros:\\n${result.stderr}`);\n      } else {\n        setOutput(`Erro do servidor: ${result.message}`);\n      }\n    } catch (error) {\n      setOutput(`Erro de conexão: Não foi possível conectar ao backend. Verifique se ele está rodando.\\n${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"M\\xF3dulo 1: Chamadas de Sistema\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Escolha um exemplo, edite o c\\xF3digo se desejar e execute-o no servidor.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExample,\n        onChange: handleExampleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"file-io\",\n          children: \"E/S de Arquivo (open, read, write, close)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"process\",\n          children: \"Processos (fork, wait, exit)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"memory\",\n          children: \"Mem\\xF3ria (brk, sbrk)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExecute,\n        disabled: isLoading,\n        children: isLoading ? 'Executando...' : 'Compilar e Executar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: code,\n        onChange: e => setCode(e.target.value),\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"output-area\",\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: output || 'A saída do programa aparecerá aqui...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(SystemCalls, \"z1r2Bf00TRGM543rzR37NAdcZ/0=\");\n_c = SystemCalls;\nexport default SystemCalls;\nvar _c;\n$RefreshReg$(_c, \"SystemCalls\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","codeExamples","SystemCalls","_s","selectedExample","setSelectedExample","code","setCode","output","setOutput","isLoading","setIsLoading","handleExampleChange","e","key","target","value","handleExecute","response","fetch","method","headers","body","JSON","stringify","result","json","ok","stdout","stderr","message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","onClick","disabled","spellCheck","_c","$RefreshReg$"],"sources":["C:/Users/marks/IdeaProjects/Project-OS/project-os-app/frontend/src/pages/SystemCalls.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Um mapa com os códigos de exemplo que você forneceu\r\nconst codeExamples = {\r\n    'file-io': `// system-call-file.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <fcntl.h>\r\n#include <string.h>\r\n\r\nint main() {\r\n    int fd;\r\n    char buffer[100];\r\n    const char *text = \"Hello, world!\";\r\n    \r\n    fd = open(\"test.txt\", O_WRONLY | O_CREAT | O_TRUNC, 0644);\r\n    write(fd, text, strlen(text));\r\n    close(fd);\r\n\r\n    fd = open(\"test.txt\", O_RDONLY);\r\n    ssize_t bytes_read = read(fd, buffer, sizeof(buffer)-1);\r\n    buffer[bytes_read] = '\\\\0';\r\n    printf(\"Lido do arquivo: %s\\\\n\", buffer);\r\n    close(fd);\r\n    \r\n    return 0;\r\n}`,\r\n    'process': `// system-call-process.c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\n\r\nint main() {\r\n    pid_t pid = fork();\r\n    if (pid == 0) { // Processo filho\r\n        printf(\"Eu sou o processo filho!\\\\n\");\r\n        exit(0);\r\n    } else { // Processo pai\r\n        printf(\"Eu sou o processo pai, esperando o filho...\\\\n\");\r\n        wait(NULL);\r\n        printf(\"Processo filho terminou.\\\\n\");\r\n    }\r\n    return 0;\r\n}`,\r\n    'memory': `// system-call-memory.c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n    void *initial_brk = sbrk(0);\r\n    printf(\"Ponteiro de heap inicial: %p\\\\n\", initial_brk);\r\n    brk(initial_brk + 4096);\r\n    void *new_brk = sbrk(0);\r\n    printf(\"Novo ponteiro de heap: %p\\\\n\", new_brk);\r\n    return 0;\r\n}`\r\n};\r\n\r\nfunction SystemCalls() {\r\n    const [selectedExample, setSelectedExample] = useState('file-io');\r\n    const [code, setCode] = useState(codeExamples[selectedExample]);\r\n    const [output, setOutput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleExampleChange = (e) => {\r\n        const key = e.target.value;\r\n        setSelectedExample(key);\r\n        setCode(codeExamples[key]);\r\n    };\r\n\r\n    // Esta função irá chamar o seu backend\r\n    const handleExecute = async () => {\r\n        setIsLoading(true);\r\n        setOutput('');\r\n\r\n        try {\r\n            // A URL do seu endpoint no backend (ex: Java/Spring Boot)\r\n            const response = await fetch('http://localhost:8080/api/execute-c', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ code: code }), // Envia o código como JSON\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                setOutput(`Saída Padrão:\\n${result.stdout}\\n\\nErros:\\n${result.stderr}`);\r\n            } else {\r\n                setOutput(`Erro do servidor: ${result.message}`);\r\n            }\r\n        } catch (error) {\r\n            setOutput(`Erro de conexão: Não foi possível conectar ao backend. Verifique se ele está rodando.\\n${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Módulo 1: Chamadas de Sistema</h1>\r\n            <p>Escolha um exemplo, edite o código se desejar e execute-o no servidor.</p>\r\n\r\n            <div className=\"control-panel\">\r\n                <select value={selectedExample} onChange={handleExampleChange}>\r\n                    <option value=\"file-io\">E/S de Arquivo (open, read, write, close)</option>\r\n                    <option value=\"process\">Processos (fork, wait, exit)</option>\r\n                    <option value=\"memory\">Memória (brk, sbrk)</option>\r\n                </select>\r\n                <button onClick={handleExecute} disabled={isLoading}>\r\n                    {isLoading ? 'Executando...' : 'Compilar e Executar'}\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"editor-container\">\r\n        <textarea\r\n            value={code}\r\n            onChange={(e) => setCode(e.target.value)}\r\n            spellCheck=\"false\"\r\n        />\r\n                <pre className=\"output-area\">\r\n          <code>{output || 'A saída do programa aparecerá aqui...'}</code>\r\n        </pre>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SystemCalls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}